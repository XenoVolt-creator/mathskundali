// bsAdConverter.js

// Base reference: BS 2000-01-01 = April 14, 1943 (JS months are 0-based)
const bsBaseYear = 2000;
const adBaseDate = new Date(1943, 3, 14); // 1943 April 14

// Static BS calendar for years 2000 to 2086
const bsCalendar = [
  [30,32,31,32,31,30,30,30,29,30,29,31], // 2000[30,32,31,32,31,30,30,30,29,30,29,31], // 2000
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2001
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2002
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2003
  [30,32,31,32,31,30,30,30,29,30,29,31], // 2004
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2005
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2006
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2007
  [31,31,31,32,31,31,29,30,30,29,29,31], // 2008
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2009
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2010
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2011
  [31,31,31,32,31,31,29,30,30,29,30,30], // 2012
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2013
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2014
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2015
  [31,31,31,32,31,31,29,30,30,29,30,30], // 2016
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2017
  [31,32,31,32,31,30,30,29,30,29,30,30], // 2018
  [31,32,31,32,31,30,30,30,29,30,29,31], // 2019
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2020
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2021
  [31,32,31,32,31,30,30,30,29,29,30,30], // 2022
  [31,32,31,32,31,30,30,30,29,30,29,31], // 2023
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2024
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2025
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2026
  [30,32,31,32,31,30,30,30,29,30,29,31], // 2027
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2028
  [31,31,32,31,32,30,30,29,30,29,30,30], // 2029
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2030
  [30,32,31,32,31,30,30,30,29,30,29,31], // 2031
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2032
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2033
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2034
  [30,32,31,32,31,31,29,30,30,29,29,31], // 2035
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2036
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2037
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2038
  [31,31,31,32,31,31,29,30,30,29,30,30], // 2039
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2040
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2041
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2042
  [31,31,31,32,31,31,29,30,30,29,30,30], // 2043
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2044
  [31,32,31,32,31,30,30,29,30,29,30,30], // 2045
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2046
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2047
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2048
  [31,32,31,32,31,30,30,30,29,29,30,30], // 2049
  [31,32,31,32,31,30,30,30,29,30,29,31], // 2050
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2051
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2052
  [31,32,31,32,31,30,30,30,29,29,30,30], // 2053
  [31,32,31,32,31,30,30,30,29,30,29,31], // 2054
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2055
  [31,31,32,31,32,30,30,29,30,29,30,30], // 2056
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2057
  [30,32,31,32,31,30,30,30,29,30,29,31], // 2058
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2059
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2060
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2061
  [30,32,31,32,31,31,29,30,29,30,29,31], // 2062
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2063
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2064
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2065
  [31,31,31,32,31,31,29,30,30,29,29,31], // 2066
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2067
  [31,31,32,32,31,30,30,29,30,29,30,30], // 2068
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2069
  [31,31,31,32,31,31,29,30,30,29,30,30], // 2070
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2071
  [31,32,31,32,31,30,30,29,30,29,30,30], // 2072
  [31,32,31,32,31,30,30,30,29,29,30,31], // 2073
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2074
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2075
  [31,32,31,32,31,30,30,30,29,29,30,30], // 2076
  [31,32,31,32,31,30,30,30,29,30,29,31], // 2077
  [31,31,31,32,31,31,30,29,30,29,30,30], // 2078
  [31,31,32,31,31,31,30,29,30,29,30,30], // 2079
  [31,32,31,32,31,30,30,30,29,29,30,30], // 2080
  [31,31,32,32,31,30,30,30,29,30,30,30], // 2081
  [30,32,31,32,31,30,30,30,29,30,30,30], // 2082
  [31,31,32,31,31,30,30,30,29,30,30,30], // 2083
  [31,31,32,31,31,30,30,30,29,30,30,30], // 2084
  [31,32,31,32,30,31,30,30,29,30,30,30], // 2085
  [30,32,31,32,31,30,30,30,29,30,30,30]  // 2086
];

function bsToAd(bsYear, bsMonth, bsDay) {
  if (bsYear < 2000 || bsYear > 2086) {
    throw new Error("BS year out of supported range (2000–2086)");
  }

  let totalDays = 0;

  // Sum days from full BS years before the target year
  for (let y = 2000; y < bsYear; y++) {
    const months = bsCalendar[y - 2000];
    for (let m = 0; m < 12; m++) {
      totalDays += months[m];
    }
  }

  // Sum days from full months before the target month in the same year
  for (let m = 1; m < bsMonth; m++) {
    totalDays += bsCalendar[bsYear - 2000][m - 1];
  }

  // Add the days of the current month (excluding today)
  totalDays += bsDay - 1;

  // Add days to base AD date
  const adDate = new Date(adBaseDate);
  adDate.setDate(adDate.getDate() + totalDays);

  return {
    year: adDate.getFullYear(),
    month: adDate.getMonth() + 1,
    day: adDate.getDate(),
    fullDate: adDate.toISOString().split("T")[0]
  };
}



// Formats AD date as YYYY-MM-DD
function formatAdDate(adDate) {
  const y = adDate.year;
  const m = String(adDate.month).padStart(2, '0');
  const d = String(adDate.day).padStart(2, '0');
  return `${y}-${m}-${d}`;
}

// ✅ Make available to global script
window.bsToAd = bsToAd;
window.formatAdDate = formatAdDate;
